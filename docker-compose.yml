version: '3.3'



networks:
  back-tier:

configs:
  prometheus.yml:
    file: ./prometheus/prometheus.yml
  alert.rules:
    file: ./prometheus/alert.rules
  config.yml:
    file: ./alertmanager/config.yml
  dashboard.yml:
    file: ./grafana/provisioning/dashboards/dashboard.yml
  docker-dashboard_rev5.json:
    file: ./grafana/provisioning/dashboards/docker-dashboard_rev5.json
  datasource.yml:
    file: ./grafana/provisioning/datasources/datasource.yml

services:

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    configs:
      - source: dashboard.yml
        target: /etc/grafana/provisioning/dashboards/dashboard.yml
        uid: '472'
      - source: docker-dashboard_rev5.json
        target: /etc/grafana/provisioning/dashboards/docker-dashboard_rev5.json
        uid: '472'
      - source: datasource.yml
        target: /etc/grafana/provisioning/datasources/datasource.yml
        uid: '472'
 

    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
    restart: always
    deploy:
       replicas: 2
       
  mariadb:
     image: mariadb
     environment:
         - MYSQL_ROOT_PASSWORD=mariadb
         - MYSQL_DATABASE=grafana
     networks:
      - back-tier

  prometheus:
    image: prom/prometheus
    configs:
      - source: prometheus.yml
        target: /etc/prometheus/prometheus.yml
      - source: alert.rules
        target: /etc/prometheus/alert.rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

    ports:
      - 9090:9090
    networks:
      - back-tier
    restart: always
    deploy:
       replicas: 2

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager:v0.15.0
    ports:
      - 9093:9093
    configs:
      - source: config.yml
        target: /etc/alertmanager/config.yml
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--cluster.peer=alertmanager2:9094'
  alertmanager2:
    image: prom/alertmanager:v0.15.0
    ports:
      - 9094:9093
    configs:
      - source: config.yml
        target: /etc/alertmanager/config.yml
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--cluster.peer=alertmanager:9094'
  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-platinum:6.2.4
    networks:
      - back-tier
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      ES_NODE_NAME: elasticsearch
      ELASTIC_PASSWORD: MagicWord
      discovery.type: single-node

  ui-cerebro:
    image: ludekvesely/elasticsearch-cerebro
    networks:
      - back-tier
    ports:
      - '9001:9000'
    environment:
      ELASTICSEARCH_HOST: http://elasticsearch:9200

  kibana:
    image: docker.elastic.co/kibana/kibana:6.2.4
    networks:
      - back-tier
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=MagicWord
